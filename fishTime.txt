/**********************************************************************/
//
//  Class:
//    FishTime
//
//  Description
//    Super class for FishSched.
//    This is just a time class uses Real Time Clock (RTC) built into the esp32 and
//    updates RTC to correct time form the internet NTP time.
//
//  ERROR CODES:
//    none yet
//
/**************************************************************************/


#include "fishTime.h"
#include "time_zones.h"

RtcDS3231<TwoWire> Rtc(Wire);

FishTime::FishTime(){
  //Serial..println("FishTime constructor was called");
  //configTimeWithTz(getTzByLocation(location), ntpServer);
  //configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  initTime();

}

void FishTime::initTime(){ 
  Serial.println("in initTime()");
/*  int i = 0;
//Serial.println("4.0");
  while(!getLocalTime(&timeinfo) && i < 5){
    Serial.println("Failed to obtain time in init");
    i++;
    delay(1000);
  }
  //Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
  i = 0; */
      //getNTPtime(10);
  //setTheTime();
  //setRtcTime();

  Rtc.Begin();

  RtcDateTime compiled = RtcDateTime(__DATE__, __TIME__);
  //printDateTime(compiled);
  //Serial.println();

  if (!Rtc.IsDateTimeValid()) {
    if (Rtc.LastError() != 0) {
      // we have a communications error
      // see https://www.arduino.cc/en/Reference/WireEndTransmission for
      // what the number means
      //Serial.print("RTC communications error = ");
      //Serial.println(Rtc.LastError());
    } else {
      // Common Causes:
      //    1) first time you ran and the device wasn't running yet
      //    2) the battery on the device is low or even missing

      //Serial.println("RTC lost confidence in the DateTime!");

      // following line sets the RTC to the date & time this sketch was compiled
      // it will also reset the valid flag internally unless the Rtc device is
      // having an issue

      Rtc.SetDateTime(compiled);
      wifiConnected = false;
      setTheTime();
      wifiConnected = true;
    }
  }

  if (!Rtc.GetIsRunning()) {
    //Serial.println("RTC was not actively running, starting now");
    Rtc.SetIsRunning(true);
  }

  now = Rtc.GetDateTime();
  if (now < compiled) {
    //Serial.println("RTC is older than compile time!  (Updating DateTime)");
    Rtc.SetDateTime(compiled);
  } else if (now > compiled) {
    //Serial.println("RTC is newer than compile time. (this is expected)");
  } else if (now == compiled) {
    //Serial.println("RTC is the same as compile time! (not expected but all is fine)");
  }

  // never assume the Rtc was last configured by you, so
  // just clear them to your needed state
  Rtc.Enable32kHzPin(false);
  Rtc.SetSquareWavePin(DS3231SquareWavePin_ModeNone);

}

bool FishTime::update(){
    struct tm timeinfo;
    int i = 0;
    bool retVal = true;
//Serial.println("6.0");
  while(!getLocalTime(&timeinfo) && i<5){
    Serial.println("Failed to obtain time in update");
    wifiConnected = false;
    retVal = false;
    i++;
    delay(1000);
  }
  i = 0;
  if(timeinfo.tm_mday == currentHour){
    //Serial.println("Still Current Day!");
    return retVal;
  }else{
    if(currentHour == 99){
      currentHour = timeinfo.tm_mday;
      //Serial.println("Frist time setting Day!");
      return retVal;
    }else{
      //do time update
      //configTimeWithTz(getTzByLocation(location), ntpServer);
      configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
      setRtcTime();
      Serial.println("Just updated RTC with Network Time");
      currentHour = timeinfo.tm_mday;
      return retVal;
    }
  }
  return retVal;
}

int FishTime::getHour(){
  //Serial.println("IN GET HOUR");
  int hour = timeinfo.tm_hour;
  return timeinfo.tm_hour;
}

int FishTime::getMinute(){
  return timeinfo.tm_min;
}

int FishTime::getYear(){
  return timeinfo.tm_year;
}
int FishTime::getMonth(){
  return timeinfo.tm_mon;
}
int FishTime::getDay(){
  return timeinfo.tm_mday;
}

void FishTime::syncTime(){
  //configTimeWithTz(getTzByLocation(location), ntpServer); 
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
}

int FishTime::getCurrentTime(String input){
  int retVal = 0;
    
    if(input == "year"){
      retVal = timeinfo.tm_year + 1900;
      //return year;
    }else if(input == "month"){
      retVal = timeinfo.tm_mon + 1;
      //return month;
    }else if(input == "day"){
      retVal = timeinfo.tm_mday;
      //return day;
    }else if(input == "hour"){
      retVal = timeinfo.tm_hour;
      //return hour;
    }else if (input == "minute"){
      retVal = timeinfo.tm_min;
      //return minute;
    }
    return retVal;
}

bool FishTime::getNTPtime(int sec) {

  {
    uint32_t start = millis();
    do {
      time(&now);
      localtime_r(&now, &timeinfo);
      //Serial.print("*");
      delay(10);
    } while (((millis() - start) <= (1000 * sec)) && (timeinfo.tm_year < (2016 - 1900)));
    if (timeinfo.tm_year <= (2016 - 1900)) return false;  // the NTP call was not successful
    //Serial.print("now ");
    //Serial.println(now);
    char time_output[30];
    //strftime(time_output, 30, "%a  %d-%m-%y %T", localtime(&now));
    //Serial.println(time_output);
    //Serial.println();
  }
  return true;
}

void FishTime::setTheTime() {
  if (wifiConnected) {

    Serial.print("Day is: ");
    currentDay = timeinfo.tm_mday;
    Serial.println(currentDay);
    Serial.print("Month is: ");
    currentMonth = timeinfo.tm_mon + 1;
    Serial.println(currentMonth);
    Serial.print("Year is: ");
    currentYear = timeinfo.tm_year - 100;
    Serial.println(currentYear);
    Serial.print("Hour is: ");
    currentHour = timeinfo.tm_hour;
    Serial.println(currentHour);
    Serial.print("Minute is: ");
    currentMinute = timeinfo.tm_min;
    Serial.println(currentMinute);
    Serial.print("Second is: ");
    currentSecond = timeinfo.tm_sec;
    Serial.println(currentSecond);
    Serial.print(" Day of Week ");
    if (timeinfo.tm_wday == 0) Serial.println(7);
    else Serial.println(timeinfo.tm_wday);
  } else {
    RtcDateTime dt = Rtc.GetDateTime();
    currentMonth = dt.Month();
    Serial.print("RTC month is: ");
    Serial.print(currentMonth);
    currentDay = dt.Day();
    Serial.print("RTC day is: ");
    Serial.print(currentDay);
    currentYear = dt.Year();
    Serial.print("RTC year is: ");
    Serial.print(currentYear);
    currentHour = dt.Hour();
    Serial.print("RTC hour is: ");
    Serial.print(currentHour);
    currentMinute = dt.Minute();
    Serial.print("RTC minute is: ");
    Serial.print(currentMinute);
    currentSecond = dt.Second();
    Serial.print("RTC second is: ");
    Serial.print(currentSecond);
  }
}

void FishTime::setRtcTime() {
  RtcDateTime currentTime = RtcDateTime(currentYear, currentMonth, currentDay, currentHour, currentMinute, 0);  //define date and time object
  if(numOfI2CDevices > 0){
    Serial.println("Rtc hardware exist");
      Rtc.SetDateTime(currentTime); //configure the RTC with object
    }                                                                               
}

void FishTime::setWifiConnected(bool val){
  wifiConnected = val;
}

bool FishTime::getWifiConnected(){
  return wifiConnected;
}
////////////////////////////////////////////////////////////////////////
//
//  This checks to see if there is an I2C device connected i.e. DS3231
//
//  return number of devices
//
///////////////////////////////////////////////////////////////////////////////
int FishTime::Scanner ()
{
  Serial.println ();
  Serial.println ("I2C scanner. Scanning ...");
  byte count = 0;

  Wire.begin();
  for (byte i = 8; i < 120; i++)
  {
    Wire.beginTransmission (i);          // Begin I2C transmission Address (i)
    if (Wire.endTransmission () == 0)  // Receive 0 = success (ACK response) 
    {
      Serial.print ("Found address: ");
      Serial.print (i, DEC);
      Serial.print (" (0x");
      Serial.print (i, HEX);     // PCF8574 7 bit address
      Serial.println (")");
      count++;
    }
  }
  Serial.print ("Found ");      
  Serial.print (count, DEC);        // numbers of devices
  Serial.println (" device(s).");
  return count;
}
